{"ast":null,"code":"import Helper from './Helper';\nexport default class FuzzySearch {\n  constructor() {\n    let haystack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!Array.isArray(keys)) {\n      options = keys;\n      keys = [];\n    }\n    this.haystack = haystack;\n    this.keys = keys;\n    this.options = Object.assign({\n      caseSensitive: false,\n      sort: false\n    }, options);\n  }\n  search() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    if (query === '') {\n      return this.haystack;\n    }\n    const results = [];\n    for (let i = 0; i < this.haystack.length; i++) {\n      const item = this.haystack[i];\n      if (this.keys.length === 0) {\n        const score = FuzzySearch.isMatch(item, query, this.options.caseSensitive);\n        if (score) {\n          results.push({\n            item,\n            score\n          });\n        }\n      } else {\n        for (let y = 0; y < this.keys.length; y++) {\n          const propertyValues = Helper.getDescendantProperty(item, this.keys[y]);\n          let found = false;\n          for (let z = 0; z < propertyValues.length; z++) {\n            const score = FuzzySearch.isMatch(propertyValues[z], query, this.options.caseSensitive);\n            if (score) {\n              found = true;\n              results.push({\n                item,\n                score\n              });\n              break;\n            }\n          }\n          if (found) {\n            break;\n          }\n        }\n      }\n    }\n    if (this.options.sort) {\n      results.sort((a, b) => a.score - b.score);\n    }\n    return results.map(result => result.item);\n  }\n  static isMatch(item, query, caseSensitive) {\n    item = String(item);\n    query = String(query);\n    if (!caseSensitive) {\n      item = item.toLocaleLowerCase();\n      query = query.toLocaleLowerCase();\n    }\n    const indexes = FuzzySearch.nearestIndexesFor(item, query);\n    if (!indexes) {\n      return false;\n    }\n\n    // Exact matches should be first.\n    if (item === query) {\n      return 1;\n    }\n\n    // If we have more than 2 letters, matches close to each other should be first.\n    if (indexes.length > 1) {\n      return 2 + (indexes[indexes.length - 1] - indexes[0]);\n    }\n\n    // Matches closest to the start of the string should be first.\n    return 2 + indexes[0];\n  }\n  static nearestIndexesFor(item, query) {\n    const letters = query.split('');\n    let indexes = [];\n    const indexesOfFirstLetter = FuzzySearch.indexesOfFirstLetter(item, query);\n    indexesOfFirstLetter.forEach((startingIndex, loopingIndex) => {\n      let index = startingIndex + 1;\n      indexes[loopingIndex] = [startingIndex];\n      for (let i = 1; i < letters.length; i++) {\n        const letter = letters[i];\n        index = item.indexOf(letter, index);\n        if (index === -1) {\n          indexes[loopingIndex] = false;\n          break;\n        }\n        indexes[loopingIndex].push(index);\n        index++;\n      }\n    });\n    indexes = indexes.filter(letterIndexes => letterIndexes !== false);\n    if (!indexes.length) {\n      return false;\n    }\n    return indexes.sort((a, b) => {\n      if (a.length === 1) {\n        return a[0] - b[0];\n      }\n      a = a[a.length - 1] - a[0];\n      b = b[b.length - 1] - b[0];\n      return a - b;\n    })[0];\n  }\n  static indexesOfFirstLetter(item, query) {\n    const match = query[0];\n    return item.split('').map((letter, index) => {\n      if (letter !== match) {\n        return false;\n      }\n      return index;\n    }).filter(index => index !== false);\n  }\n}","map":{"version":3,"names":["Helper","FuzzySearch","constructor","haystack","keys","options","Array","isArray","Object","assign","caseSensitive","sort","search","query","results","i","length","item","score","isMatch","push","y","propertyValues","getDescendantProperty","found","z","a","b","map","result","String","toLocaleLowerCase","indexes","nearestIndexesFor","letters","split","indexesOfFirstLetter","forEach","startingIndex","loopingIndex","index","letter","indexOf","filter","letterIndexes","match"],"sources":["/Users/adityapatel/Desktop/CRUD-ReactJS-Application/node_modules/fuzzy-search/src/FuzzySearch.js"],"sourcesContent":["import Helper from './Helper';\n\nexport default class FuzzySearch {\n  constructor(haystack = [], keys = [], options = {}) {\n    if (! Array.isArray(keys)) {\n      options = keys;\n      keys = [];\n    }\n\n    this.haystack = haystack;\n    this.keys = keys;\n    this.options = Object.assign({\n      caseSensitive: false,\n      sort: false,\n    }, options);\n  }\n\n  search(query = '') {\n    if (query === '') {\n      return this.haystack;\n    }\n\n    const results = [];\n\n    for (let i = 0; i < this.haystack.length; i++) {\n      const item = this.haystack[i];\n\n      if (this.keys.length === 0) {\n        const score = FuzzySearch.isMatch(item, query, this.options.caseSensitive);\n\n        if (score) {\n          results.push({ item, score });\n        }\n      } else {\n        for (let y = 0; y < this.keys.length; y++) {\n          const propertyValues = Helper.getDescendantProperty(item, this.keys[y]);\n\n          let found = false;\n\n          for (let z = 0; z < propertyValues.length; z++) {\n            const score = FuzzySearch.isMatch(propertyValues[z], query, this.options.caseSensitive);\n\n            if (score) {\n              found = true;\n\n              results.push({ item, score });\n\n              break;\n            }\n          }\n\n          if (found) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.options.sort) {\n      results.sort((a, b) => a.score - b.score);\n    }\n\n    return results.map(result => result.item);\n  }\n\n  static isMatch(item, query, caseSensitive) {\n    item = String(item);\n    query = String(query);\n\n    if (! caseSensitive) {\n      item = item.toLocaleLowerCase();\n      query = query.toLocaleLowerCase();\n    }\n\n    const indexes = FuzzySearch.nearestIndexesFor(item, query);\n\n    if (! indexes) {\n      return false;\n    }\n\n    // Exact matches should be first.\n    if (item === query) {\n      return 1;\n    }\n\n    // If we have more than 2 letters, matches close to each other should be first.\n    if (indexes.length > 1) {\n      return 2 + (indexes[indexes.length - 1] - indexes[0]);\n    }\n\n    // Matches closest to the start of the string should be first.\n    return 2 + indexes[0];\n  }\n\n  static nearestIndexesFor(item, query) {\n    const letters = query.split('');\n    let indexes = [];\n\n    const indexesOfFirstLetter = FuzzySearch.indexesOfFirstLetter(item, query);\n\n    indexesOfFirstLetter.forEach((startingIndex, loopingIndex) => {\n      let index = startingIndex + 1;\n\n      indexes[loopingIndex] = [startingIndex];\n\n      for (let i = 1; i < letters.length; i++) {\n        const letter = letters[i];\n\n        index = item.indexOf(letter, index);\n\n        if (index === -1) {\n          indexes[loopingIndex] = false;\n\n          break;\n        }\n\n        indexes[loopingIndex].push(index);\n\n        index++;\n      }\n    });\n\n    indexes = indexes.filter(letterIndexes => letterIndexes !== false);\n\n    if (! indexes.length) {\n      return false;\n    }\n\n    return indexes.sort((a, b) => {\n      if (a.length === 1) {\n        return a[0] - b[0];\n      }\n\n      a = a[a.length - 1] - a[0];\n      b = b[b.length - 1] - b[0];\n\n      return a - b;\n    })[0];\n  }\n\n  static indexesOfFirstLetter(item, query) {\n    const match = query[0];\n\n    return item.split('').map((letter, index) => {\n      if (letter !== match) {\n        return false;\n      }\n\n      return index;\n    }).filter(index => index !== false);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}